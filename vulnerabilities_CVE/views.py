from django.utils import timezone
from django.db.models import Count
import requests
from rest_framework import status
from rest_framework.response import Response
from rest_framework.views import APIView
from .models import Vulnerability
from django.conf import settings
from django.utils import timezone

#GET: ALL CVE
class VulnerabilityNISTListAPIView(APIView):
    def get(self, request, *args, **kwargs):
        nist_api_url = 'https://services.nvd.nist.gov/rest/json/cves/2.0'
        #params = {
            #'startIndex': 0,  # Índice inicial para la paginación
            #'resultsPerPage': 100  # Número de resultados por página
        #}
        
        api_key = settings.NIST_API_KEY
        headers = {
            'apiKey': api_key  
        }

        try:
            # Hacemos la solicitud GET a la API del NIST
            response = requests.get(nist_api_url, headers=headers)
            #response = requests.get(nist_api_url, headers=headers,params=params, timeout=20)
            response.raise_for_status()  # Verifica si hay errores HTTP
            response_data = response.json()

            
            for item in response_data.get('vulnerabilities', []):
                cve_id = item['cve']['id']
                description = item['cve']['descriptions'][0]['value']  
                severity = item['cve']['metrics']['cvssMetricV2'][0]['baseSeverity'] if 'cvssMetricV2' in item['cve']['metrics'] else 'Unknown'

                # Buscar si la vulnerabilidad ya existe en la base de datos
                vulnerability, created = Vulnerability.objects.update_or_create(
                    cve_id=cve_id,
                    defaults={
                        'description': description,
                        'severity': severity,
                        'is_fixed': False,  
                    }
                )

            # Devolver los resultados obtenidos de la API
            return Response(response_data, status=response.status_code)

        except requests.exceptions.HTTPError as http_err:
            return Response({'error': f'HTTP error occurred: {http_err}'}, status=500)
        except requests.exceptions.ConnectionError as conn_err:
            return Response({'error': f'Error connecting to NIST API: {conn_err}'}, status=500)
        except requests.exceptions.Timeout as timeout_err:
            return Response({'error': f'Request timed out: {timeout_err}'}, status=500)
        except requests.exceptions.RequestException as req_err:
            return Response({'error': f'An error occurred: {req_err}'}, status=500)

#POST: ALL FIXED CVE
class FixVulnerabilitiesAPIView(APIView):
    def post(self, request, *args, **kwargs):
        cve_ids = request.data.get('cve_ids', [])

        if not cve_ids:
            return Response({'error': 'No se proporcionaron vulnerabilidades para marcar como fixeadas.'}, status=status.HTTP_400_BAD_REQUEST)

        # Buscar vulnerabilidades por sus cve_id
        vulnerabilities = Vulnerability.objects.filter(cve_id__in=cve_ids)

        if not vulnerabilities.exists():
            return Response({'error': 'No se encontraron vulnerabilidades con los CVEs proporcionados.'}, status=status.HTTP_404_NOT_FOUND)

        vulnerabilities.update(is_fixed=True, fixed_date=timezone.now())

        return Response({'message': 'Vulnerabilidades marcadas como fixeadas.'}, status=status.HTTP_200_OK)

#GET: NO FIXED VUL
class UnfixedVulnerabilitiesAPIView(APIView):
    def get(self, request, *args, **kwargs):
        vulnerabilities = Vulnerability.objects.filter(is_fixed=False)
        data = [
            {
                'cve_id': vulnerability.cve_id,
                'description': vulnerability.description,
                'severity': vulnerability.severity
            }
            for vulnerability in vulnerabilities
        ]

        return Response(data, status=status.HTTP_200_OK)
    
#GET: ALL VUL BY SEVERITY
class SeveritySummaryAPIView(APIView):
    def get(self, request, *args, **kwargs):
        # Contar vulnerabilidades agrupadas por severidad
        severity_summary = Vulnerability.objects.values('severity').annotate(count=Count('severity'))

        return Response(severity_summary, status=status.HTTP_200_OK)

